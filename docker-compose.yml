version: '3.7'

services:
  # This container runs the artifact storage as a minio server, which is a lightweight S3.
    minio:
        restart: always
        image: minio/minio
        ports:
            - "9000:9000"
            - "9001:9001"
        command: server /data --console-address ':9001' --address ':9000'
        environment:
            - MINIO_ROOT_USER=${MINIO_ACCESS_KEY_ID}
            - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
        volumes:
            - mlflow-data:/data


  # This container creates the "data" in the minio server, in which mlflow will later store the artifacts.
    mlflow-init:
        image: minio/mc
        depends_on:
          - minio
        env_file:
            - .env
        entrypoint: >
          /bin/sh -c "
          /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY_ID} ${MINIO_SECRET_ACCESS_KEY};
          /usr/bin/mc mb myminio/data;
          /usr/bin/mc policy download myminio/data;
          exit 0;
          "


  # This container runs the postgresql database for mlflow.
    postgres-mlflow:
        image: postgres:13
        environment:
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          POSTGRES_DB: ${POSTGRES_DB}
        volumes:
          # The data folder is a named volume mounted to /var/lib/postgresql/data
          - postgres-db-volume-mlflow:/var/lib/postgresql/data

  # This container runs the webserver for mlflow.
    mlflow-webserver:
        build: ./dockerfiles/mlflow
        image: mlflow_server
        ports:
          - "5000:5000"
        environment:
          # The following credentials allow connection to the minio server.
          MLFLOW_S3_ENDPOINT_URL: http://minio:9000
          MLFLOW_S3_IGNORE_TLS: "true"
          MINIO_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY_ID}
          MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY}

        # The following command will launch the mlflow webserver on port 5000, with postgresql as the database
        # and S3 as the artifact storage.
        # The option "--serve-artifacts" will enable the serving of artifacts through mlflow as a proxy to the S3 server.
        command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-mlflow/${POSTGRES_DB} --artifacts-destination s3://data -h 0.0.0.0 -p 5000 --serve-artifacts
        depends_on:
          - postgres-mlflow
          - minio
          - mlflow-init


volumes:
    mlflow-data:
    postgres-db-volume-mlflow: